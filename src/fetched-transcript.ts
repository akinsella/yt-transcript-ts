import { FetchedTranscriptSnippet } from './models';

/**
 * A complete transcript with all the snippets and metadata.
 * 
 * This class represents a successfully fetched transcript from YouTube,
 * containing both the full text content (divided into timed segments) and
 * metadata about the transcript.
 */
export class FetchedTranscript {
  /** The list of transcript snippets (text segments with timing information) */
  public readonly snippets: FetchedTranscriptSnippet[];
  
  /** YouTube video ID this transcript belongs to */
  public readonly videoId: string;
  
  /** Human-readable language name (e.g., "English", "Espa√±ol") */
  public readonly language: string;
  
  /** Language code (e.g., "en", "fr", "es-MX") */
  public readonly languageCode: string;
  
  /** Whether this transcript was automatically generated by YouTube */
  public readonly isGenerated: boolean;

  constructor(
    snippets: FetchedTranscriptSnippet[],
    videoId: string,
    language: string,
    languageCode: string,
    isGenerated: boolean
  ) {
    this.snippets = snippets;
    this.videoId = videoId;
    this.language = language;
    this.languageCode = languageCode;
    this.isGenerated = isGenerated;
  }

  /**
   * Converts the transcript to a raw data format suitable for serialization.
   * 
   * @returns A vector of objects, each representing one transcript segment
   */
  toRawData(): Array<{ text: string; start: number; duration: number }> {
    return this.snippets.map(snippet => ({
      text: snippet.text,
      start: snippet.start,
      duration: snippet.duration,
    }));
  }

  /**
   * Returns the full transcript text as a single string.
   * 
   * @returns A string containing the full transcript text
   */
  text(): string {
    return this.snippets.map(snippet => snippet.text).join(' ');
  }

  /**
   * Returns a reference to the individual transcript segments.
   * 
   * @returns An array of transcript snippets
   */
  parts(): FetchedTranscriptSnippet[] {
    return this.snippets;
  }

  /**
   * Returns the language name.
   */
  getLanguage(): string {
    return this.language;
  }

  /**
   * Returns the language code.
   */
  getLanguageCode(): string {
    return this.languageCode;
  }

  /**
   * Returns whether this transcript was automatically generated.
   */
  getIsGenerated(): boolean {
    return this.isGenerated;
  }

  /**
   * Returns the total duration of the transcript in seconds.
   */
  duration(): number {
    if (this.snippets.length === 0) {
      return 0;
    }

    const lastSnippet = this.snippets[this.snippets.length - 1];
    return lastSnippet.start + lastSnippet.duration;
  }

  /**
   * Implements iterator interface for the transcript snippets.
   */
  *[Symbol.iterator](): Iterator<FetchedTranscriptSnippet> {
    for (const snippet of this.snippets) {
      yield snippet;
    }
  }

  /**
   * Converts the transcript to JSON format.
   */
  toJSON(): any {
    return {
      snippets: this.snippets,
      videoId: this.videoId,
      language: this.language,
      languageCode: this.languageCode,
      isGenerated: this.isGenerated,
    };
  }

  /**
   * Creates a FetchedTranscript from JSON data.
   */
  static fromJSON(data: any): FetchedTranscript {
    return new FetchedTranscript(
      data.snippets || [],
      data.videoId || '',
      data.language || '',
      data.languageCode || '',
      data.isGenerated || false
    );
  }
} 